# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddProblemToContestInput {
  contestId: ID!
  problemId: ID!
}

input AddProblemToListInput {
  listId: ID!
  problemId: ID!
}

type AuthOutput {
  accessToken: String!
  refreshToken: String!
}

type CodeExecutionOutput {
  executionId: ID!
  message: String
  status: String!
  success: Boolean!
}

type Comment {
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  discussion: Discussion!
  discussionId: ID!
  downvotes: Float!
  id: ID!
  parent: Comment
  parentId: ID
  updatedAt: DateTime!
  upvotes: Float!
  user: User!
  userId: ID!
}

type Contest {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  endTime: DateTime!
  id: ID!
  isActive: Boolean!
  isPremium: Boolean!
  problems: [Problem!]!
  registeredParticipants: Float!
  registrations: [ContestRegistration!]
  slug: String!
  startTime: DateTime!
  status: String!
  title: String!
  updatedAt: DateTime!
}

type ContestEligibilityOutput {
  contest: Contest!
  eligible: Boolean!
  message: String!
  registered: Boolean
}

type ContestLeaderboardOutput {
  contest: Contest!
  currentPage: Float!
  docs: [ContestRegistration!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Float!
  totalPages: Float!
}

type ContestRegistration {
  contest: Contest!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  problemsSolved: Float!
  rank: Float!
  score: Float!
  totalAttempts: Float!
  updatedAt: DateTime!
  user: User!
}

input CreateContestInput {
  description: String!
  endTime: DateTime!
  isActive: Boolean! = true
  isPremium: Boolean! = false
  problemIds: [String!]
  slug: String!
  startTime: DateTime!
  title: String!
}

input CreateProblemInput {
  constraints: String!
  description: String!
  difficulty: String!
  isActive: Boolean! = true
  isPremium: Boolean! = false
  memoryLimit: Float!
  solutionLink: String
  tags: [String!]!
  testCases: [TestCaseInput!]!
  timeLimit: Float!
  title: String!
}

input CreateProblemListInput {
  description: String
  isPublic: Boolean! = false
  name: String!
  problemIds: [String!]
}

input CreateSubmissionInput {
  code: String!
  language: String!
  problemId: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Discussion {
  comments: [Comment!]
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  downvotes: Float!
  id: ID!
  isPinned: Boolean!
  problem: Problem
  problemId: ID
  title: String!
  updatedAt: DateTime!
  upvotes: Float!
  user: User!
  userId: ID!
  views: Float!
}

input ExecuteCodeInput {
  code: String!
  customInputs: [String!]
  language: String!
  problemId: ID!
}

type ExecutionResultOutput {
  errorMessage: String
  executionId: ID!
  memory: Float
  message: String
  output: String
  runtime: Float
  status: String!
  success: Boolean!
  testCasesPassed: Float
  totalTestCases: Float
}

type GetAllProblemListsOutput {
  currentPage: Float!
  docs: [ProblemList!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Float!
  totalPages: Float!
}

type GetAllProblemsOutput {
  currentPage: Float!
  docs: [Problem!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Float!
  totalPages: Float!
}

input GetContestLeaderboardInput {
  contestId: ID!
  limit: Float! = 10
  page: Float! = 1
}

type GetContestProblemsOutput {
  problemCount: Float!
  problems: [Problem!]!
}

input GetContestsInput {
  isActive: Boolean
  isPremium: Boolean
  limit: Float! = 10
  page: Float! = 1
  search: String
  status: String
}

type GetContestsOutput {
  currentPage: Float!
  docs: [Contest!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Float!
  totalPages: Float!
}

input GetProblemListsInput {
  isPublic: Boolean
  limit: Float! = 10
  page: Float! = 1
}

input GetProblemsInput {
  difficulty: String
  limit: Float! = 10
  page: Float! = 1
  search: String
  tags: [String!]
}

input GetSubmissionsInput {
  limit: Float! = 10
  page: Float! = 1
  problemId: ID
}

type GetSubmissionsOutput {
  currentPage: Float!
  docs: [Submission!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Float!
  totalPages: Float!
}

input IDInput {
  id: ID!
}

input LoginInput {
  identifier: String!
  password: String!
}

type MessageOutput {
  message: String!
}

type Mutation {
  addProblemToContest(input: AddProblemToContestInput!): Contest!
  addProblemToList(input: AddProblemToListInput!): ProblemList!
  createContest(input: CreateContestInput!): Contest!
  createProblem(input: CreateProblemInput!): Problem!
  createProblemList(input: CreateProblemListInput!): ProblemList!
  deleteContest(params: IDInput!): MessageOutput!
  deleteProblem(params: IDInput!): MessageOutput!
  deleteProblemList(params: IDInput!): MessageOutput!
  executeCode(input: ExecuteCodeInput!): CodeExecutionOutput!
  login(input: LoginInput!): AuthOutput!
  logout: MessageOutput!
  register(input: RegisterInput!): MessageOutput!
  registerForContest(params: IDInput!): ContestRegistration!
  removeProblemFromContest(input: RemoveProblemFromContestInput!): Contest!
  removeProblemFromList(input: RemoveProblemFromListInput!): ProblemList!
  requestPasswordReset(input: RequestPasswordResetInput!): MessageOutput!
  resendVerificationEmail(input: ResendVerificationEmailInput!): MessageOutput!
  resetPassword(input: ResetPasswordInput!): MessageOutput!
  submitSolution(input: CreateSubmissionInput!): Submission!
  updateContest(input: UpdateContestInput!, params: IDInput!): Contest!
  updateProblem(input: UpdateProblemInput!, params: IDInput!): Problem!
  updateProblemList(input: UpdateProblemListInput!): ProblemList!
  updateUserContestScore(params: IDInput!, points: Float!): MessageOutput!
  verifyEmail(input: VerifyEmailInput!): MessageOutput!
}

type Notification {
  createdAt: DateTime!
  deletedAt: DateTime
  entityId: String
  entityType: String
  id: ID!
  isRead: ID!
  message: ID!
  title: ID!
  updatedAt: DateTime!
  user: User!
  userId: ID!
}

input PaginationInput {
  limit: Float! = 10
  page: Float! = 1
}

type Problem {
  acceptanceRate: Float
  acceptedCount: Float!
  acceptedSubmissions: Float!
  constraints: String
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  difficulty: String!
  dislikes: Float!
  id: ID!
  isActive: Boolean!
  isPremium: Boolean!
  likes: Float!
  memoryLimit: Float!
  problemSubmissions: [Submission!]
  solutionLink: String
  submissionCount: Float!
  submissions: Float!
  tags: [String!]!
  testCases: [ProblemTestCase!]
  timeLimit: Float!
  title: String!
  updatedAt: DateTime!
  user: User!
}

type ProblemList {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  id: ID!
  isPublic: Boolean!
  name: String!
  problems: [Problem!]!
  updatedAt: DateTime!
  user: User!
}

type ProblemStatsOutput {
  acceptanceRate: Float!
  acceptedCount: Float!
  lastSubmitted: DateTime!
  message: String
  problemId: ID!
  status: String!
  submissionCount: Float!
  success: Boolean!
}

type ProblemTestCase {
  createdAt: DateTime!
  deletedAt: DateTime
  explanation: String
  id: ID!
  input: String!
  inputType: String!
  isHidden: Boolean!
  output: String!
  outputType: String!
  problem: Problem!
  updatedAt: DateTime!
}

type Query {
  checkContestEligibility(params: IDInput!): ContestEligibilityOutput!
  executionResult(params: IDInput!): ExecutionResultOutput!
  getAllContests(input: GetContestsInput): GetContestsOutput!
  getAllProblemLists(input: GetProblemListsInput): GetAllProblemListsOutput!
  getAllProblems(input: GetProblemsInput): GetAllProblemsOutput!
  getAllSubmissions(input: GetSubmissionsInput): GetSubmissionsOutput!
  getContest(params: IDInput!): Contest!
  getContestLeaderboard(input: GetContestLeaderboardInput!): ContestLeaderboardOutput!
  getContestProblems(params: IDInput!): GetContestProblemsOutput!
  getOngoingContests(input: PaginationInput): GetContestsOutput!
  getProblem(params: IDInput!): Problem!
  getProblemList(params: IDInput!): ProblemList!
  getUpcomingContests(input: PaginationInput): GetContestsOutput!
  getUserContestParticipation(input: PaginationInput): GetContestsOutput!
  getUserContestSubmissions(input: PaginationInput, params: IDInput!): MessageOutput!
  problemDifficulties: [String!]!
  problemStats(params: IDInput!): ProblemStatsOutput!
  problemSubmissions(input: GetSubmissionsInput, params: IDInput!): GetSubmissionsOutput!
  problemTags: [String!]!
  submission(params: IDInput!): Submission!
  submissionStatus(params: IDInput!): String!
  userProblemStatus: UserProblemsStatusOutput!
  userStreak: UserStreakOutput!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

input RemoveProblemFromContestInput {
  contestId: ID!
  problemId: ID!
}

input RemoveProblemFromListInput {
  listId: ID!
  problemId: ID!
}

input RequestPasswordResetInput {
  email: String!
}

input ResendVerificationEmailInput {
  email: String!
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

type Submission {
  code: String!
  errorMessage: String
  id: ID!
  language: String!
  memory: Float
  problem: Problem!
  problemId: ID!
  runtime: Float
  status: String!
  submittedAt: DateTime!
  user: User!
}

input TestCaseInput {
  explanation: String
  input: String!
  inputType: String!
  output: String!
  outputType: String!
}

input UpdateContestInput {
  description: String
  endTime: DateTime
  isActive: Boolean
  isPremium: Boolean
  slug: String
  startTime: DateTime
  title: String
}

input UpdateProblemInput {
  constraints: String
  description: String
  difficulty: String
  isActive: Boolean
  isPremium: Boolean
  memoryLimit: Float
  solutionLink: String
  tags: [String!]
  testCases: [TestCaseInput!]
  timeLimit: Float
  title: String
}

input UpdateProblemListInput {
  description: String
  id: ID!
  isPublic: Boolean
  name: String
}

type User {
  avatarUrl: String
  bio: String
  contestRegistrations: [ContestRegistration!]
  createdAt: DateTime!
  currentStreak: Float!
  deletedAt: DateTime
  discussions: [Discussion!]
  displayName: String
  easyProblemsSolved: Float!
  email: String!
  hardProblemsSolved: Float!
  id: ID!
  isActive: Boolean!
  isVerified: Boolean!
  maxStreak: Float!
  mediumProblemsSolved: Float!
  notifications: [Notification!]
  problemLists: [ProblemList!]
  problems: [Problem!]
  reputation: Float!
  role: String!
  submissions: [Submission!]
  subscriptions: UserSubscription
  totalSolved: Float!
  updatedAt: DateTime!
  username: String!
}

type UserProblemsStatusOutput {
  attemptedCount: Float!
  attemptedProblemIds: [String!]!
  message: String
  solvedCount: Float!
  solvedProblemIds: [String!]!
  success: Boolean!
  totalCount: Float!
}

type UserStreakOutput {
  currentStreak: Float!
  maxStreak: Float!
  success: Boolean!
  totalActiveDays: Float!
}

type UserSubscription {
  autoRenew: Boolean!
  createdAt: DateTime!
  deletedAt: DateTime
  endDate: DateTime!
  id: ID!
  isActive: Boolean!
  plan: String!
  startDate: DateTime!
  updatedAt: DateTime!
  user: User!
  userId: ID!
}

input VerifyEmailInput {
  token: String!
}